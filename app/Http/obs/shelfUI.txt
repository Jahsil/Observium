<template>
  <div>
  <div v-if="!stock_loading" class="py-3">
    <PieChart @selectedStore="handleStoreDialog" :data="chartData" />
  </div>
  <v-progress-circular v-else indeterminate></v-progress-circular>
  <v-row justify="center">
    <v-dialog
      v-model="dialog"
      persistent
      max-width="1000"
    >
      
      <v-card class="mb-3">

      
        <v-toolbar >
            <v-toolbar-title>
                <v-btn @click="dialog = false" icon>
            <v-icon>{{ mdiWindowClose }} </v-icon>
        </v-btn>
                
            </v-toolbar-title>

        <v-spacer></v-spacer>

        <v-toolbar-title>{{ product.product_name }}</v-toolbar-title>

        <v-spacer></v-spacer>

        </v-toolbar>
        <div class="ml-3 mr-3 mb-5 pb-3">
        <div style="height:25px">
        </div>


        <!-- <v-card-title class="text-h5">
          Shelf
        </v-card-title> -->
        

        <!-- <div>
          <div class="matrix-container" :style="calculateRowAndCol()" >
            

            <div v-for="index in shelf_lables" :key="index" class="matrix-column">
              Column {{ index }}
            </div>
            <div v-for="index in rows * shelf_lables.length " :key="index" class="matrix-item">
              <div class="rectangle-content">{{ index + 1 }}</div> 
            </div>
          </div>
        </div> -->

        <!-- simple table approach  -->
        <v-simple-table
          fixed-header
       
        >
          <template v-slot:default>
            <thead style="width:50px">
              <tr
                
              >
                <th v-for="item in shelf_labels"
                :key="item" style="width:50px" class="text-left" >
                  {{ item }}
                </th>
                
              </tr>
            </thead>
          
            <tbody>
           
              <tr
                v-for="(item, index) in shelf_items"
                :key="index"
              >
                <td v-for="(it,ind) in item" :key="ind"><div class="mb-3 mt-3 pa-2" style="border:1px solid black; width:45px; height:45px">
        
                  {{ it }}
                </div></td>
              
              </tr>
            </tbody>
          </template>
        </v-simple-table>

        </div>

            </v-card>
          </v-dialog>
        </v-row>
        </div>
      </template>

<script>
import { Products } from "@/api/";
import { Stores } from "@/api/";
import {mdiWindowClose} from "@mdi/js" 
export default {
  props: {
    product: {
      type: Object,
      required: true,
    },
    status: {
      type: Number,
    },
  },
  computed: {
    token() {
      return this.$auth.strategy.token.get();
    },
  },
  data() {
    return {
      mdiWindowClose: mdiWindowClose,
      stock_loading: true,
      chartData: {
        labels: [],
        datasets: [],
      },
      rows: null,
      cols: null, 
      shelf_labs: [],
      test_shelf_labels:["E", "F", "G" , "P"],
      formData:{
        store_id: null,
        product_id: null,
      },
      shelf_items:[],
      test_shelf_items:
      [
          {
            E: 'F4',
            F: '33',
            G: '56',
            P: '0'
          },
          {
            E: '56',
            F: '33',
            G: '0',
            P: '12',
            
          },
          {
            E: '67',
            F: '33',
            G: '56',
            P: '0',
          },
          {
            E: '44',
            F: '33',
            G: '0',
            P: '56',
            
          },
     
         
      ],
      dialog: false,
    };
  },
  mounted() {
    this.report();
  },
  methods: {
    async report() {
      try {
        this.stock_loading = true;
        const { data } = await Products.storeDist(this.token, this.product.id, {
          status: this.status,
        });
        console.log("Data rec is ===", data) 
        console.log("Recieved data is ===", this.product)
        const backgroundColor = [];
        const values = [];
        const storeIds = [];
        data.forEach((element) => {
          const randomColor = Math.floor(Math.random() * 16777215).toString(16);
          this.chartData.labels.push(element.name);
          backgroundColor.push(`#${randomColor}`);
          values.push(element.total);
          storeIds.push(element.store_id);
        });

        this.chartData.datasets = [
          { data: values, backgroundColor: backgroundColor, storeIds: storeIds },
        ];

        this.stock_loading = false;
        console.log("Chart data is ====", this.chartData)
      } catch (error) {
        this.stock_loading = false;
      }
    },
    async handleStoreDialog(num){
      this.dialog = true 
      console.log("Emiit", num)
      this.formData["store_id"] = num
      this.formData["product_id"] = this.product.id 
      const {data} = await Stores.get_shelf(this.token , this.formData )
      console.log("RESsSS ====", data )
      let products = []
      data.data.forEach((element) => {
        products.push(element["label"]) 
      })
      this.getRowsAndColumns(num , products)

    },
    async getRowsAndColumns(num , products){
      try{
        this.shelf_items = []
        let store = {}
        store["store_id"] = num
        const {data} = await Stores.get_shelf(this.token , store )
        console.log("Whole data is ===", data)

        let row = -Infinity
        let col = -Infinity
        
        let column = 0 
        data.data.forEach((element) => {
          let char = element["label"].charAt(0)
          column = element["label"].charAt(1)
          let asciiValue = char.charCodeAt(0)
          if(asciiValue >= col){
            col = asciiValue
          }
          if(column >= row){
            row = column 
          }
          
          
        })
        
        console.log("333333333333333", row , col)
        let minAscivalue = Infinity
        let maxAscivalue = -Infinity 
        let minRow = Infinity
        products.forEach((element) => {
          let char = element.charAt(0)
          let asciiValue = char.charCodeAt(0)
          column = element.charAt(1)
          if(asciiValue < minAscivalue ){
            minAscivalue = asciiValue
          }
          if (asciiValue > maxAscivalue){
            maxAscivalue = asciiValue
          }
          if (column < minRow){
            minRow = column 
          }
          // minAscivalue = Math.min(minAscivalue , asciiValue)
        })
        
        this.shelf_labels = []
        if (minAscivalue === maxAscivalue){
          let character = String.fromCharCode(parseInt(minAscivalue))
          this.shelf_labels.push(character) 
        }else{
          for (let i = minAscivalue ; i <= maxAscivalue; i++){
            let character = String.fromCharCode(parseInt(i))
            this.shelf_labels.push(character) 
          }
        }
        console.log("Shelf lllll", this.shelf_labels)
        console.log("min and max are ===", minAscivalue , maxAscivalue)
        console.log("min an max rowsss", minRow , row )


        console.log("min an max rowwww ==", minRow , row )
        this.cols = col - minAscivalue 
        this.rows = row 
        
        console.log("Products ---", products) 
        console.log("maximummmmmmmm===", col , this.cols ,minRow, this.rows )  

        // for (let i = 0 ; i < this.shelf_lables.length; i++){
        //   for (let j = minRow ; j <= this.rows ; j ++){
        //     if (this.shelf_lables[i])
        //   }
        // }

        // for (let i = minRow ; i <= this.rows ; i ++){
          let shelf_level = {}
          for (let j = 0 ; j < this.shelf_labels.length ; j++){
            for (let k = minRow ; k <= this.rows ; k ++ ){
              shelf_level = {}
              if(products.includes(this.shelf_labels[j]+`${k}`)){
                console.log("Yessssss", this.shelf_labels[j]+`${k}` , j )
                shelf_level[`${this.shelf_labels[j]}`] = this.shelf_labels[j] + `${k}`
                this.shelf_items.push(shelf_level)
                
              }else{
                shelf_level[`${this.shelf_labels[j]}`] = "0"
                this.shelf_items.push(shelf_level)
                continue 
              }
            }
            
          }
          console.log("shelf labels ---", this.shelf_labels)
          console.log("shelf ---------", this.shelf_items) 
           
        

      }catch(err){
        console.log("Error while fetching rows and columns",err) 
      }
    },

    calculateRowAndCol(){
      return {
        display: "grid",
        gridTemplateColumns: `repeat(${this.shelf_labels.length}, 1fr)`, // Adjust N to the number of columns
        gap: "15px",
      };
    },
    
  },

  
};
</script>LazyChartsStoreChart

<style>
/* Reset some default styles */
.matrix-container {
            display: grid;
            grid-template-columns: repeat(4, 1fr); /* Adjust N to the number of columns */
            gap: 15px; /* Adjust the gap between divs as needed */
        }
.matrix-column {
    display: grid;
    grid-template-rows: auto; /* Auto size rows based on content */
    align-content: center; /* Vertically center the column name */
    text-align: center;
    font-weight: bold;
    border: 1px solid #ddd;
    padding: 10px;
}

.matrix-item {
    padding: 20px;
    margin:5px;
    /* border: 1px solid #ddd; Add borders or styles as needed */
    text-align: center;
    background-color: #ccc;
}
</style>



Shelf 

<!-- Shelf  -->

            <!-- <div class="d-flex">
              <v-sheet v-for="(row, rowIndex) in shelf_items" :key="rowIndex" width="160"
                class="d-flex flex-column text-center">
                <v-subheader class="mx-auto">Shelf {{ row[0][0] }}</v-subheader>
                <div class="d-flex align-center justify-center" v-for="(item, colIndex) in row" :key="colIndex">
                  <span class="text-caption">{{ item }}</span>
                  <v-sheet   width="100%" height="90" flat style="border: 1px solid black;" class="d-flex align-center mx-1 px-2"
                    :color="checkElement(item) ? 'indigo' : 'white'">
                    <span v-if="checkElement(item)" class="my-auto text-subtitle-1 white--text">
                      {{ product.product_name }}
                    </span>
                  </v-sheet>
                </div>
              </v-sheet>
            </div> -->